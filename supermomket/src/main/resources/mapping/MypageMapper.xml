<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="MypageDAO">

	<!-- 관리자 메뉴 -->
	<!-- 사용자 목록 보기(관리자) -->
	<select id="searchUsers" resultType="user">
	    SELECT *
	    FROM USER
	    WHERE
	    <if test="searchType != null and searchKeyword != null">
	        ${searchType} LIKE #{searchKeyword}
	    </if>
	    ORDER BY U_DATE DESC
	    LIMIT #{offset}, #{limit}
	</select>


	<select id="getSearchUserCount" resultType="int">
	    SELECT COUNT(*)
	    FROM USER
	    WHERE
	    <if test="searchType != null and searchKeyword != null">
	        ${searchType} LIKE #{searchKeyword}
	    </if>
	</select>


	<select id="getUsersPg" resultType="user">
	    SELECT *
	    FROM USER
	    WHERE U_SECESSION = 'N'
	    ORDER BY U_DATE DESC
	    LIMIT #{offset}, #{limit}
	</select>


	<select id="getTotalUserCnt" resultType="int">
	    SELECT COUNT(*)
	    FROM USER
	    WHERE U_SECESSION = 'N'
	</select>


	<!-- 사용자 정보 수정(관리자) -->
	<update id="selUser">
		UPDATE USER
		SET U_NAME = #{u_name},
		U_NICKNAME = #{u_nickname},
		 U_ADDRESS = #{u_address},
		     U_PNO = #{u_pno},
	       U_EMAIL = #{u_email}
		<if test="u_pw != null">
			, U_PW = #{u_pw}
		</if>
		WHERE U_ID = #{u_id}
	</update>


	<!-- 회원 삭제(관리자) -->
	<update id="delUser">
		UPDATE USER
		   SET U_SECESSION = 'Y'
		 WHERE U_ID = #{u_id}
	</update>


	<!-- 관리자 비밀번호 확인(관리자) -->
	<select id="updateAdminChk" resultType="user">
		SELECT U_ID
			 , U_PW
		  FROM USER
		 WHERE U_ID = #{u_id}
	</select>
	
	
	<!-- 관리자 비밀번호 수정 상세(관리자) -->
	<select id="updateAdminDetail" resultType="user">
		SELECT U_ID
		     , U_PW
		  FROM USER
		 WHERE U_ID = #{u_id}
	</select>
		
		
	<!-- 관리자 새 비밀번호로 업데이트(관리자) -->
	<update id="setNewAdminPw" >
	    UPDATE USER
	    SET U_PW = #{u_pw}
	    WHERE U_ID = #{u_id}
	</update>







	<!-- 사용자 메뉴 -->
	<!-- 주문 목록 보기(사용자) -->
	<select id="getBuyList" resultType="orderlist">
       SELECT A.C_NO 
            , A.O_TOTAL_PRICE
            , A.O_TOTAL_CNT  
            , DATE_FORMAT(A.O_INPUT_DATE, '%Y-%m-%d') AS O_INPUT_DATE 
            , A.MERCHANT_UID
            , A.O_STATUS
            , A.O_CANCEL_YN
            , (SELECT C.P_IMG
                        FROM PRODUCT C 
                       WHERE 1=1
                         AND C.P_NO = B.P_NO 
							    LIMIT 1) AS P_img
            , CONCAT(
            		 (SELECT C.P_NAME 
                        FROM PRODUCT C 
                       WHERE 1=1
                         and C.P_NO = B.P_NO 
							    LIMIT 1)
                     , ' 외', A.O_TOTAL_CNT, '건') AS P_NAME
        FROM ORDERLIST A JOIN O_DETAIL B ON A.C_NO = B.C_NO
       WHERE A.U_ID = #{u_id}
         AND IFNULL(A.O_DELETE_YN, '결제취소') = 'N'
         AND O_CHK = 1
         ORDER BY O_INPUT_DATE DESC
	</select>
	
	<!-- 주문 상세 페이지(사용자) -->
	<select id="getBuyListDetail" resultType="orderlist">
	 	SELECT    
		          A.MERCHANT_UID
		        , MAX(A.O_TOTAL_PRICE) AS O_TOTAL_PRICE
		        , SUM(B.P_COUNT) AS O_TOTAL_CNT
		        , MAX(DATE_FORMAT(A.O_INPUT_DATE, '%Y-%m-%d')) AS O_INPUT_DATE
		        , MAX(A.O_STATUS) AS O_STATUS
		        , MAX(A.O_CANCEL_YN) AS O_CANCEL_YN
		        , B.P_NO
		        , MAX((SELECT C.P_NAME 
			             FROM PRODUCT C 
				         WHERE C.P_NO = B.P_NO
				         LIMIT 1)) AS P_NAME
			     , MAX((SELECT C.P_IMG 
					       FROM PRODUCT C 
					      WHERE C.P_NO = B.P_NO
					      LIMIT 1)) AS P_IMG
			     , MAX(A.O_STATUS) AS O_STATUS
			     , MAX(A.O_PAY_TYPE) AS O_PAY_TYPE
			     , MAX(A.O_ADDRESS) AS O_ADDRESS
		        , MAX(A.O_RECEIVER) AS O_RECEIVER
		        , MAX(A.O_RECEIVER_CONTACT) AS O_RECEIVER_CONTACT
		        , MAX(B.P_COUNT) AS P_COUNT
		        , MAX(B.P_TOTAL) AS P_TOTAL
				  , MAX(CASE WHEN
				   			(SELECT COUNT(1) 
					           FROM REVIEW C
							  WHERE 1=1
							   AND C.MERCHANT_UID = A.MERCHANT_UID
							   AND C.C_NO = B.P_NO
							   AND C.C_ID = A.U_ID
							   AND IFNULL(C.C_DELETE,'N') = 'N'
							 ) > 0 THEN 'Y' ELSE 'N' END) AS P_REVIEW_YN
		        
	    FROM ORDERLIST A 
	     JOIN O_DETAIL B ON A.MERCHANT_UID = B.MERCHANT_UID
	    WHERE A.U_ID = #{u_id}
	      AND IFNULL(A.O_DELETE_YN, 'N') = 'N'
	      AND A.MERCHANT_UID = #{merchant_uid}
	    GROUP BY A.MERCHANT_UID, B.P_NO
	</select>
	
	

	<!-- 찜한 상품 목록 조회(사용자) -->
<!-- 	<select id="getZzimList" resultType="product"> -->
<!-- 		SELECT P_NAME -->
<!-- 			 , P_PRICE -->
<!-- 			 , P_IMG -->
<!-- 			 , P_NO -->
<!-- 	 	  FROM PRODUCT -->
<!-- 		 WHERE P_GOOD = 'Y' -->
<!-- 	</select> -->

	<!-- 마이페이지 현재 비밀번호 조회(사용자) -->
	<select id="updateMypageChk" resultType="user">
		SELECT U_ID
			 , U_PW
		  FROM USER
		 WHERE U_ID = #{u_id}
	</select>
	
	<!-- 마이페이지 정보 수정(사용자) -->
	<select id="updateMypageDetail" resultType="user">
		SELECT U_ID
		     , U_NAME
		     , U_NICKNAME
		     , U_EMAIL
		     , U_PNO
		     , U_ADDRESS
		  FROM USER
		 WHERE U_ID = #{u_id}
	</select>
	
	
	<!-- 리뷰 쓰러 가기(사용자) -->
<!-- 	<select id="" resultType="orderlist"> -->
<!-- 		SELECT U_ID -->
<!-- 	</select> -->
	
	
	<!-- 마이페이지 정보 수정 - 닉네임 중복 쳌(사용자) -->
	<select id="nickCheck" resultType="int">
		SELECT COUNT(*)
		  FROM USER
         WHERE TRIM(LOWER(U_NICKNAME)) = TRIM(LOWER(#{u_nickname}))
	</select>
	
	
	<!-- 마이페이지 새 정보 업데이트 -->
	<update id="setNewMypage">
		UPDATE USER
	       SET U_NICKNAME = #{u_nickname}
	         , U_ADDRESS = #{u_address}
	         , U_PNO = #{u_pno}
	         , U_EMAIL = #{u_email}
	     WHERE U_ID = #{u_id}
	</update>




	<!-- 비밀번호 조회(사용자) -->
	<select id="updatePasswordChk" resultType="user">
		SELECT U_ID
			 , U_PW
		  FROM USER
		 WHERE U_ID = #{u_id}
	</select>
	
	
	<!-- 비밀번호 수정 상세(사용자) -->
	<select id="updatePasswordDetail" resultType="user">
		SELECT U_ID
		     , U_PW
		  FROM USER
		 WHERE U_ID = #{u_id}
	</select>
		
		
	<!-- 새 비밀번호로 업데이트(사용자) -->
	<update id="setNewPassword">
		UPDATE USER
		   SET U_PW = #{u_pw}
		 WHERE U_ID = #{u_id}
	</update>
	
	
 	<!-- 마이페이지 회원탈퇴(사용자) --> 
	<update id="taltaeUser">
		UPDATE USER
		   SET U_SECESSION = 'Y'
	 	 WHERE U_ID = #{u_id}
	</update>
</mapper>
